# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from edumip_msgs/EduMipState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EduMipState(genpy.Message):
  _md5sum = "d8a26db22626d6362109a0c1a1de3a6a"
  _type = "edumip_msgs/EduMipState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 setpoint_phi_dot    # commanded average  wheel vel ~ trans vel
float32 setpoint_gamma_dot  # commanded steering angle vel ~ angualr vel
float32 setpoint_phi        # commanded average wheel pos
float32 phi                 # average wheel pos
float32 setpoint_gamma      # commanded steering angle
float32 gamma               # steering angle
float32 setpoint_theta      # commanded body tilt
float32 theta               # body tilt
float32 d1_u                # control command for balnce loop
float32 d3_u                # control command for steering loop
float32 dutyL               # left  motor duty cycle
float32 dutyR               # right motor duty cycle

# 2017-02-22 LLW Added odometry data 
float32 wheel_angle_L       # total rotation of left  wheel (radians) (+ is forward)
float32 wheel_angle_R       # total rotation of right wheel (radians) (+ is forward)
float32 body_frame_easting  # displacemnt of body frame (m) (+ is East )
float32 body_frame_northing # displacemnt of body frame (m) (+ is North)
float32 body_frame_heading  # compass heading (radians) 

float32 vBatt               # battery voltage in volts
bool    armed               # controllers are active
bool    running             # balance program is running

 """
  __slots__ = ['setpoint_phi_dot','setpoint_gamma_dot','setpoint_phi','phi','setpoint_gamma','gamma','setpoint_theta','theta','d1_u','d3_u','dutyL','dutyR','wheel_angle_L','wheel_angle_R','body_frame_easting','body_frame_northing','body_frame_heading','vBatt','armed','running']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       setpoint_phi_dot,setpoint_gamma_dot,setpoint_phi,phi,setpoint_gamma,gamma,setpoint_theta,theta,d1_u,d3_u,dutyL,dutyR,wheel_angle_L,wheel_angle_R,body_frame_easting,body_frame_northing,body_frame_heading,vBatt,armed,running

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EduMipState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.setpoint_phi_dot is None:
        self.setpoint_phi_dot = 0.
      if self.setpoint_gamma_dot is None:
        self.setpoint_gamma_dot = 0.
      if self.setpoint_phi is None:
        self.setpoint_phi = 0.
      if self.phi is None:
        self.phi = 0.
      if self.setpoint_gamma is None:
        self.setpoint_gamma = 0.
      if self.gamma is None:
        self.gamma = 0.
      if self.setpoint_theta is None:
        self.setpoint_theta = 0.
      if self.theta is None:
        self.theta = 0.
      if self.d1_u is None:
        self.d1_u = 0.
      if self.d3_u is None:
        self.d3_u = 0.
      if self.dutyL is None:
        self.dutyL = 0.
      if self.dutyR is None:
        self.dutyR = 0.
      if self.wheel_angle_L is None:
        self.wheel_angle_L = 0.
      if self.wheel_angle_R is None:
        self.wheel_angle_R = 0.
      if self.body_frame_easting is None:
        self.body_frame_easting = 0.
      if self.body_frame_northing is None:
        self.body_frame_northing = 0.
      if self.body_frame_heading is None:
        self.body_frame_heading = 0.
      if self.vBatt is None:
        self.vBatt = 0.
      if self.armed is None:
        self.armed = False
      if self.running is None:
        self.running = False
    else:
      self.setpoint_phi_dot = 0.
      self.setpoint_gamma_dot = 0.
      self.setpoint_phi = 0.
      self.phi = 0.
      self.setpoint_gamma = 0.
      self.gamma = 0.
      self.setpoint_theta = 0.
      self.theta = 0.
      self.d1_u = 0.
      self.d3_u = 0.
      self.dutyL = 0.
      self.dutyR = 0.
      self.wheel_angle_L = 0.
      self.wheel_angle_R = 0.
      self.body_frame_easting = 0.
      self.body_frame_northing = 0.
      self.body_frame_heading = 0.
      self.vBatt = 0.
      self.armed = False
      self.running = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_18f2B().pack(_x.setpoint_phi_dot, _x.setpoint_gamma_dot, _x.setpoint_phi, _x.phi, _x.setpoint_gamma, _x.gamma, _x.setpoint_theta, _x.theta, _x.d1_u, _x.d3_u, _x.dutyL, _x.dutyR, _x.wheel_angle_L, _x.wheel_angle_R, _x.body_frame_easting, _x.body_frame_northing, _x.body_frame_heading, _x.vBatt, _x.armed, _x.running))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 74
      (_x.setpoint_phi_dot, _x.setpoint_gamma_dot, _x.setpoint_phi, _x.phi, _x.setpoint_gamma, _x.gamma, _x.setpoint_theta, _x.theta, _x.d1_u, _x.d3_u, _x.dutyL, _x.dutyR, _x.wheel_angle_L, _x.wheel_angle_R, _x.body_frame_easting, _x.body_frame_northing, _x.body_frame_heading, _x.vBatt, _x.armed, _x.running,) = _get_struct_18f2B().unpack(str[start:end])
      self.armed = bool(self.armed)
      self.running = bool(self.running)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_18f2B().pack(_x.setpoint_phi_dot, _x.setpoint_gamma_dot, _x.setpoint_phi, _x.phi, _x.setpoint_gamma, _x.gamma, _x.setpoint_theta, _x.theta, _x.d1_u, _x.d3_u, _x.dutyL, _x.dutyR, _x.wheel_angle_L, _x.wheel_angle_R, _x.body_frame_easting, _x.body_frame_northing, _x.body_frame_heading, _x.vBatt, _x.armed, _x.running))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 74
      (_x.setpoint_phi_dot, _x.setpoint_gamma_dot, _x.setpoint_phi, _x.phi, _x.setpoint_gamma, _x.gamma, _x.setpoint_theta, _x.theta, _x.d1_u, _x.d3_u, _x.dutyL, _x.dutyR, _x.wheel_angle_L, _x.wheel_angle_R, _x.body_frame_easting, _x.body_frame_northing, _x.body_frame_heading, _x.vBatt, _x.armed, _x.running,) = _get_struct_18f2B().unpack(str[start:end])
      self.armed = bool(self.armed)
      self.running = bool(self.running)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_18f2B = None
def _get_struct_18f2B():
    global _struct_18f2B
    if _struct_18f2B is None:
        _struct_18f2B = struct.Struct("<18f2B")
    return _struct_18f2B
